generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum StatutPaiement {
  ACQUITTE
  EN_ATTENTE
}

enum TypePaiement {
  ESPECE
  VIREMENT
  CHEQUE
}

enum StatutMembre {
  ACTIF
  INACTIF
  ARCHIVE
}

model Association {
  id        String   @id @default(uuid())
  nom       String
  adresse   String
  siret     String
  type      String
  email     String
  telephone String
  description String?
  reseauxSociaux String?
  siteWeb    String?
  createdAt DateTime @default(now())

  comptes      Compte[]
  familles     Famille[]
  membres      Membre[]
  cotisations  Cotisation[]
  factures     Facture[]
  typeFamilles TypeFamille[]
}

model Compte {
  id            String      @id @default(uuid())
  email         String      @unique
  motDePasse    String
  nom           String
  prenom        String
  associationId String
  association   Association @relation(fields: [associationId], references: [id])
}

model TypeFamille {
  id            String      @id @default(uuid())
  nom           String
  familles      Famille[]
  associationId String
  association   Association @relation(fields: [associationId], references: [id])

  @@unique([nom, associationId])
}

model Famille {
  id            String      @id @default(uuid())
  typeFamilleId String
  type          TypeFamille @relation(fields: [typeFamilleId], references: [id])

  chefFamilleId String @unique
  chefFamille   Membre @relation("FamilleChef", fields: [chefFamilleId], references: [id])

  membres      Membre[]    @relation("FamilleMembres")
  cotisation   Cotisation?
  adresse      String      @default("")
  adresseEmail String      @default("")
  telephone    String      @default("")

  associationId String
  association   Association @relation(fields: [associationId], references: [id])
}

model Membre {
  id            String      @id @default(cuid())
  nom           String
  prenom        String
  dateNaissance DateTime
  dateEntree    DateTime    @default(now())
  dateSortie    DateTime?
  statut        StatutMembre @default(ACTIF)
  annee         Int         @default(dbgenerated("EXTRACT(YEAR FROM CURRENT_DATE)"))
  associationId String
  association   Association @relation(fields: [associationId], references: [id])
  
  famille       Famille?    @relation("FamilleMembres", fields: [familleId], references: [id])
  familleId     String?
  
  familleChef   Famille?    @relation("FamilleChef")
  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Cotisation {
  id        String   @id @default(uuid())
  familleId String   @unique
  famille   Famille  @relation(fields: [familleId], references: [id])
  montant   Float
  facture   Facture?

  associationId String
  association   Association @relation(fields: [associationId], references: [id])
}

model Facture {
  id             String          @id @default(uuid())
  cotisationId   String          @unique
  cotisation     Cotisation      @relation(fields: [cotisationId], references: [id])
  typePaiement   TypePaiement?
  statutPaiement StatutPaiement?
  datePaiement   DateTime?

  associationId String
  association   Association @relation(fields: [associationId], references: [id])
}
